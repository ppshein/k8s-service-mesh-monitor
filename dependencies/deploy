#!/bin/bash
<<DOC
  .SYNOPSIS
    Apply Helm
  .POSITION_PARAMETER DEPENDENCY
    dependency name
  .EXAMPLE
    ./deploy [dependency] [version]
DOC

# e: immediately exit if error
# u: exit if refer to non existing variable
# o: return error code of any sub command in pipeline
set -euo pipefail

TASK=$1
ARGS=${@:2}

help__deployIstio="Deploy Nginx Ingress Controller with helm"
task_deployIstio() {
  helm repo add istio https://istio-release.storage.googleapis.com/charts
  helm repo update
  kubectl create namespace istio-system
  helm install istio-base istio/base -n istio-system
  helm install istiod istio/istiod -n istio-system --wait
  kubectl create namespace istio-ingress
  kubectl label namespace istio-ingress istio-injection=enabled
  helm install istio-ingress istio/gateway -n istio-ingress --wait
}

help__deployMetricsServer="Deploy Metrics with helm"
task_deployMetrics() {
  local version=$1
  kubectl apply -f ./metrics/auth.yml
  kubectl run python-logs --image ppshein/k8s-python-client:$version --restart=Never
}

help__deployMetricsServer="Deploy Metrics Server with helm"
task_deployMetricsServer() {
  helm repo add bitnami https://charts.bitnami.com/bitnami
  helm upgrade --namespace default metrics-server bitnami/metrics-server --set apiService.create=true
}

list_all_helps() {
  compgen -v | grep -E "^help__.*"
}

NEW_LINE=$'\n'
if type -t "task_$TASK" &>/dev/null; then
  task_$TASK $ARGS
else
  echo "usage: $0 <task> [<..args>]"
  echo "task:"

  HELPS=""
  for help in $(list_all_helps); do

    HELPS="$HELPS    ${help/help__/} |-- ${!help}$NEW_LINE"
  done

  echo "$HELPS" | column -t -s "|"
  exit 1
fi